name: 🗑️ Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string
      force_destroy:
        description: 'Force destroy even if resources are in use'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  validate-input:
    name: 🔍 Validate Destruction Request
    runs-on: ubuntu-latest
    
    steps:
      - name: ✅ Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Invalid confirmation. You must type 'DESTROY' to proceed."
            echo "🛡️ This is a safety measure to prevent accidental infrastructure destruction."
            exit 1
          fi
          echo "✅ Confirmation validated. Proceeding with infrastructure destruction."

      - name: ⚠️ Destruction Warning
        run: |
          echo "## ⚠️ INFRASTRUCTURE DESTRUCTION WARNING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **This action will permanently destroy all infrastructure resources!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources to be destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️ EC2 Instance" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Security Groups" >> $GITHUB_STEP_SUMMARY
          echo "- 🔑 Key Pairs" >> $GITHUB_STEP_SUMMARY
          echo "- 👤 IAM Roles and Policies" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Network Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚙️ Destruction Settings:" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Destroy**: \`${{ github.event.inputs.force_destroy }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  pre-destroy-backup:
    name: 💾 Pre-Destruction Backup
    runs-on: ubuntu-latest
    needs: validate-input
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Terraform Init
        working-directory: ./terraform
        run: |
          terraform init
          echo "✅ Terraform initialized for backup"

      - name: 📋 Export Current State
        working-directory: ./terraform
        run: |
          echo "📋 Exporting current infrastructure state..."
          terraform show -json > terraform-state-backup.json
          terraform output -json > terraform-outputs-backup.json
          
          echo "💾 Current infrastructure state backed up"
          echo "📊 State file size: $(du -h terraform-state-backup.json | cut -f1)"

      - name: 📤 Upload State Backup
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-backup-${{ github.run_number }}
          path: |
            terraform/terraform-state-backup.json
            terraform/terraform-outputs-backup.json
          retention-days: 30

  destroy-infrastructure:
    name: 🗑️ Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-input, pre-destroy-backup]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Terraform Init
        working-directory: ./terraform
        run: |
          terraform init
          echo "✅ Terraform initialized for destruction"

      - name: 📋 Terraform Plan Destroy
        working-directory: ./terraform
        run: |
          echo "📋 Creating destruction plan..."
          terraform plan -destroy \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="instance_type=t3.micro" \
            -var="docker_image=placeholder" \
            -var="dockerhub_username=placeholder" \
            -out=destroy-plan
          
          echo "📋 Destruction plan created successfully"

      - name: 🗑️ Terraform Destroy
        working-directory: ./terraform
        run: |
          echo "🗑️ Starting infrastructure destruction..."
          
          if [ "${{ github.event.inputs.force_destroy }}" == "true" ]; then
            echo "⚠️ Force destroy enabled - ignoring resource dependencies"
            terraform destroy -auto-approve \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="instance_type=t3.micro" \
              -var="docker_image=placeholder" \
              -var="dockerhub_username=placeholder" \
              -parallelism=1
          else
            echo "🔄 Standard destroy - respecting resource dependencies"
            terraform destroy -auto-approve \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="instance_type=t3.micro" \
              -var="docker_image=placeholder" \
              -var="dockerhub_username=placeholder"
          fi
          
          echo "✅ Infrastructure destruction completed"

      - name: 🧹 Cleanup Terraform State
        working-directory: ./terraform
        run: |
          echo "🧹 Cleaning up Terraform state files..."
          rm -f terraform.tfstate*
          rm -f destroy-plan
          rm -f tfplan
          echo "✅ Cleanup completed"

  post-destroy-verification:
    name: ✅ Post-Destruction Verification
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: always()
    
    steps:
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Verify Resource Cleanup
        run: |
          echo "🔍 Verifying that resources have been properly destroyed..."
          
          # Check for any remaining EC2 instances with our tags
          INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=online-shop" \
                     "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          
          if [ -n "$INSTANCES" ]; then
            echo "⚠️ Warning: Found remaining instances: $INSTANCES"
            echo "remaining_instances=$INSTANCES" >> $GITHUB_OUTPUT
          else
            echo "✅ No remaining EC2 instances found"
          fi
          
          # Check for security groups
          SECURITY_GROUPS=$(aws ec2 describe-security-groups \
            --filters "Name=tag:Project,Values=online-shop" \
            --query 'SecurityGroups[].GroupId' \
            --output text)
          
          if [ -n "$SECURITY_GROUPS" ]; then
            echo "⚠️ Warning: Found remaining security groups: $SECURITY_GROUPS"
          else
            echo "✅ No remaining security groups found"
          fi

      - name: 📊 Generate Destruction Report
        if: always()
        run: |
          echo "## 🗑️ Infrastructure Destruction Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Destruction Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Destroy**: \`${{ github.event.inputs.force_destroy }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: \`${{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.destroy-infrastructure.result }}" == "success" ]; then
            echo "### ✅ Destruction Status" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Infrastructure successfully destroyed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💾 Backup Information" >> $GITHUB_STEP_SUMMARY
            echo "- State backup artifact: \`terraform-state-backup-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Backup retention: 30 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Destruction Status" >> $GITHUB_STEP_SUMMARY
            echo "**Destruction failed!** Please check the logs and manually verify resource cleanup." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛠️ Manual Cleanup Required" >> $GITHUB_STEP_SUMMARY
            echo "You may need to manually destroy remaining resources in the AWS console." >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-docker-images:
    name: 🐳 Cleanup Docker Images
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: success() && github.event.inputs.force_destroy == 'true'
    
    steps:
      - name: 🐳 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🗑️ Remove Docker Images (Optional)
        run: |
          echo "🐳 Note: Docker images in Docker Hub are not automatically removed."
          echo "💡 If you want to remove them, you can do so manually from Docker Hub."
          echo "🔗 Visit: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/online-shop"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "Docker images in Docker Hub were not removed automatically." >> $GITHUB_STEP_SUMMARY
          echo "Visit [Docker Hub](${{ secrets.DOCKERHUB_USERNAME }}/online-shop) to manage them manually." >> $GITHUB_STEP_SUMMARY
