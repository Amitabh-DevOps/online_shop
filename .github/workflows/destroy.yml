name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm destruction'
        required: true
        type: string

env:
  AWS_REGION: eu-west-1

jobs:
  # Job 1: Destroy Main Infrastructure
  destroy-infrastructure:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'destroy'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Main Infrastructure
        run: |
          echo "🔥 Destroying main infrastructure..."
          cd infrastructure/main
          
          # Create backend config (SAME as deploy.yml)
          cat > backend.hcl << EOF
          bucket         = "${{ secrets.STATE_BUCKET_NAME }}"
          key            = "terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ secrets.DYNAMODB_TABLE_NAME }}"
          encrypt        = true
          EOF
          
          # Initialize with backend (this will download the state from S3)
          terraform init -backend-config=backend.hcl
          
          # Show what will be destroyed (should show resources now)
          terraform plan -destroy \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" \
            -var="docker_image=${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest"
          
          # Destroy infrastructure
          terraform destroy -auto-approve \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" \
            -var="docker_image=${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest"
          
          echo "✅ Main infrastructure destroyed"

  # Job 2: Destroy Backend Infrastructure with Terraform
  destroy-backend:
    name: Destroy Backend with Terraform
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: github.event.inputs.confirm == 'destroy'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Backend Infrastructure with Terraform
        run: |
          echo "🔥 Destroying backend infrastructure with Terraform..."
          cd infrastructure/backend
          
          # Initialize Terraform
          terraform init
          
          # Import existing resources into Terraform state
          echo "📥 Importing existing backend resources..."
          
          # Import S3 bucket and related resources
          if aws s3api head-bucket --bucket "${{ secrets.STATE_BUCKET_NAME }}" --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            echo "Importing S3 bucket..."
            terraform import aws_s3_bucket.terraform_state "${{ secrets.STATE_BUCKET_NAME }}" || echo "S3 bucket import failed"
            terraform import aws_s3_bucket_versioning.terraform_state "${{ secrets.STATE_BUCKET_NAME }}" || echo "S3 versioning import failed"
            terraform import aws_s3_bucket_server_side_encryption_configuration.terraform_state "${{ secrets.STATE_BUCKET_NAME }}" || echo "S3 encryption import failed"
            terraform import aws_s3_bucket_public_access_block.terraform_state "${{ secrets.STATE_BUCKET_NAME }}" || echo "S3 public access block import failed"
          else
            echo "S3 bucket not found, skipping import"
          fi
          
          # Import DynamoDB table
          if aws dynamodb describe-table --table-name "${{ secrets.DYNAMODB_TABLE_NAME }}" --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            echo "Importing DynamoDB table..."
            terraform import aws_dynamodb_table.terraform_locks "${{ secrets.DYNAMODB_TABLE_NAME }}" || echo "DynamoDB table import failed"
          else
            echo "DynamoDB table not found, skipping import"
          fi
          
          # Plan destruction (should now show resources to destroy)
          echo "📋 Planning backend destruction..."
          terraform plan -destroy \
            -var="state_bucket_name=${{ secrets.STATE_BUCKET_NAME }}" \
            -var="dynamodb_table_name=${{ secrets.DYNAMODB_TABLE_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}"
          
          # Destroy backend using Terraform state management
          echo "🔥 Executing backend destruction..."
          terraform destroy -auto-approve \
            -var="state_bucket_name=${{ secrets.STATE_BUCKET_NAME }}" \
            -var="dynamodb_table_name=${{ secrets.DYNAMODB_TABLE_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}"
          
          echo "✅ Backend infrastructure destroyed with Terraform"

  # Job 3: Verify Complete Cleanup
  verify-cleanup:
    name: Verify Complete Cleanup
    runs-on: ubuntu-latest
    needs: [destroy-infrastructure, destroy-backend]
    if: github.event.inputs.confirm == 'destroy'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify All Resources Destroyed
        run: |
          echo "🔍 Verifying complete cleanup..."
          CLEANUP_STATUS="COMPLETE"
          
          # Check S3 bucket
          echo "Checking S3 bucket: ${{ secrets.STATE_BUCKET_NAME }}"
          if aws s3api head-bucket --bucket "${{ secrets.STATE_BUCKET_NAME }}" --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            echo "❌ S3 bucket still exists"
            CLEANUP_STATUS="PARTIAL"
          else
            echo "✅ S3 bucket successfully destroyed"
          fi
          
          # Check DynamoDB table
          echo "Checking DynamoDB table: ${{ secrets.DYNAMODB_TABLE_NAME }}"
          if aws dynamodb describe-table --table-name "${{ secrets.DYNAMODB_TABLE_NAME }}" --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            TABLE_STATUS=$(aws dynamodb describe-table --table-name "${{ secrets.DYNAMODB_TABLE_NAME }}" --region "${{ env.AWS_REGION }}" --query 'Table.TableStatus' --output text 2>/dev/null || echo "NOT_FOUND")
            if [ "$TABLE_STATUS" = "DELETING" ]; then
              echo "⏳ DynamoDB table is being deleted..."
              echo "✅ DynamoDB table deletion in progress"
            else
              echo "❌ DynamoDB table still exists"
              CLEANUP_STATUS="PARTIAL"
            fi
          else
            echo "✅ DynamoDB table successfully destroyed"
          fi
          
          # Check for remaining EC2 instances
          echo "Checking for remaining EC2 instances..."
          INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=online-shop" "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --output text --region "${{ env.AWS_REGION }}")
          
          if [ -n "$INSTANCES" ] && [ "$INSTANCES" != "None" ] && [ "$INSTANCES" != "" ]; then
            echo "❌ Found remaining EC2 instances: $INSTANCES"
            CLEANUP_STATUS="PARTIAL"
          else
            echo "✅ No remaining EC2 instances"
          fi
          
          # Final status
          echo ""
          echo "🎯 Final Cleanup Status: $CLEANUP_STATUS"
          
          if [ "$CLEANUP_STATUS" = "COMPLETE" ]; then
            echo "🎉 All resources destroyed successfully!"
            echo "💰 Your AWS bill should now be minimal"
            echo "✅ Complete end-to-end Terraform lifecycle validated"
          else
            echo "⚠️  Some resources may still exist"
            echo "🔍 Check AWS console for any remaining resources"
          fi

  # Job 4: Send Notification
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [destroy-infrastructure, destroy-backend, verify-cleanup]
    if: always() && github.event.inputs.confirm == 'destroy'
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.destroy-infrastructure.result }}" == "success" ]] && \
             [[ "${{ needs.destroy-backend.result }}" == "success" ]] && \
             [[ "${{ needs.verify-cleanup.result }}" == "success" ]]; then
            echo "result=Success ✅" >> $GITHUB_OUTPUT
            echo "message=All infrastructure destroyed successfully using Terraform" >> $GITHUB_OUTPUT
          else
            echo "result=Partial ⚠️" >> $GITHUB_OUTPUT
            echo "message=Some destruction steps may need manual completion" >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🔥 Infrastructure Destruction - ${{ steps.status.outputs.result }}"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
              <h2 style="color: #d73a49;">🔥 Infrastructure Destruction Complete</h2>
              <p><strong>Status:</strong> ${{ steps.status.outputs.result }}</p>
              <p><strong>Message:</strong> ${{ steps.status.outputs.message }}</p>
              <hr>
              <h3>Destruction Details:</h3>
              <ul>
                <li><strong>Repository:</strong> ${{ github.repository }}</li>
                <li><strong>Triggered by:</strong> ${{ github.actor }}</li>
                <li><strong>Method:</strong> 100% Terraform Automation</li>
                <li><strong>State Management:</strong> Complete S3 Backend Integration</li>
              </ul>
              <hr>
              <h3>Job Results:</h3>
              <ul>
                <li>Destroy Infrastructure: ${{ needs.destroy-infrastructure.result }}</li>
                <li>Destroy Backend: ${{ needs.destroy-backend.result }}</li>
                <li>Verify Cleanup: ${{ needs.verify-cleanup.result }}</li>
              </ul>
              <hr>
              <h3>🎉 Fully Automated Process:</h3>
              <p>This destruction used complete Terraform automation:</p>
              <ol>
                <li>✅ Main infrastructure destroyed via Terraform S3 backend</li>
                <li>✅ Backend state downloaded from S3</li>
                <li>✅ Backend destroyed via Terraform state management</li>
                <li>✅ Complete cleanup verification - all resources removed</li>
                <li>✅ Zero manual intervention required</li>
              </ol>
              <p><strong>Result:</strong> Complete end-to-end Infrastructure as Code lifecycle! 🚀</p>
              <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Full Details</a></p>
            </div>
        continue-on-error: true
