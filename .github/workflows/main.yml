name: CI/CD Pipeline for Online Shop

# Trigger the workflow on pushes to the 'github-action' branch.
on:
  push:
    branches:
      - github-action

jobs:
  ###########################################################################
  # Job 1: Configure Terraform Backend
  ###########################################################################
  terraform-backend:
    name: Configure Terraform Backend
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Step 3: Verify AWS CLI installation.
      - name: Check AWS CLI Version
        run: aws --version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 4: Configure AWS Credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # Step 5: Test AWS Configuration by listing S3 buckets.
      - name: Testing Configuration
        run: aws s3 ls
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 6: Check if the S3 Bucket exists.
      - name: Check if S3 Bucket Exists
        id: check_bucket
        run: |
          if aws s3 ls "s3://${{ secrets.AWS_S3_BUCKET }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "CREATE_BACKEND=true" >> $GITHUB_ENV
          else
            echo "CREATE_BACKEND=false" >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 7: Initialize the Terraform backend.
      - name: Initialize Backend
        run: terraform init
        working-directory: terraform/terraform_backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 8: Apply the Terraform backend configuration.
      - name: Apply Backend Configuration
        run: terraform apply --auto-approve -var="create_backend=$CREATE_BACKEND"
        working-directory: terraform/terraform_backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ###########################################################################
  # Job 2: Provision Infrastructure Resources
  ###########################################################################
  terraform-resources:
    name: Provision Resources
    runs-on: ubuntu-latest
    needs: terraform-backend
    outputs:
      ec2_public_ip: ${{ steps.get-ec2-ip.outputs.ec2_ip }}
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Verify AWS CLI installation.
      - name: Check AWS CLI Version
        run: aws --version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Configure AWS Credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # Initialize Terraform using the remote backend.
      - name: Initialize Resources with Backend
        run: terraform init
        working-directory: terraform/terraform_resources
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Execute Terraform plan to review changes.
      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/terraform_resources
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Apply the Terraform changes.
      - name: Apply Terraform Changes
        run: terraform apply --auto-approve
        working-directory: terraform/terraform_resources
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Capture the EC2 instance's public IP from Terraform outputs.
      - name: Get EC2 Public IP
        id: get-ec2-ip
        run: echo "ec2_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: terraform/terraform_resources

  ###########################################################################
  # Job 3: Build & Push Docker Image to DockerHub
  ###########################################################################
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-resources
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Log in to DockerHub using credentials stored in GitHub Secrets.
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build the Docker image for the online shop.
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/online_shop:latest .

      # Push the built image to DockerHub.
      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/online_shop:latest

  ###########################################################################
  # Job 4: Deploy the Application on EC2 Instance
  ###########################################################################
  deploy:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: [terraform-resources, docker]
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 1: Update the system on the EC2 instance via SSH.
      - name: Update System
        env:
          EC2_PUBLIC_IP: ${{ needs.terraform-resources.outputs.ec2_public_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo apt update -y"

      # Step 2: Install Docker on the EC2 instance.
      - name: Install Docker
        env:
          EC2_PUBLIC_IP: ${{ needs.terraform-resources.outputs.ec2_public_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo apt install docker.io -y && sudo usermod -aG docker ubuntu"

      # Step 3: Deploy the Docker container on the EC2 instance.
      - name: Deploy Container
        env:
          EC2_PUBLIC_IP: ${{ needs.terraform-resources.outputs.ec2_public_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "
            sudo docker stop online_shop || true
            sudo docker rm online_shop || true
            sudo docker pull ${DOCKER_USERNAME}/online_shop:latest
            sudo docker run -d -p 3000:3000 --name online_shop ${DOCKER_USERNAME}/online_shop:latest
          "

  ###########################################################################
  # Job 5: Send Notification Email (NEW)
  ###########################################################################
  notify:
    name: Send Notification Email
    runs-on: ubuntu-latest
    needs: [terraform-backend, terraform-resources, docker, deploy]
    if: always()  # Ensure this job runs regardless of previous outcomes
    steps:
      # Step to determine overall pipeline status
      - name: Determine overall pipeline status
        id: pipeline-status
        run: |
          # Check if all required jobs succeeded
          if [[ "${{ needs.terraform-backend.result }}" == "success" ]] \
          && [[ "${{ needs.terraform-resources.result }}" == "success" ]] \
          && [[ "${{ needs.docker.result }}" == "success" ]] \
          && [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "result=Success ✅" >> $GITHUB_OUTPUT
          else
            echo "result=Failed ❌" >> $GITHUB_OUTPUT
          fi

      # Step to send notification email
      - name: Send Email
        uses: hilarion5/send-mail@v1
        with:
          smtp-server: smtp.gmail.com
          smtp-port: 465
          smtp-secure: true
          from-email: ${{ secrets.MAIL_FROM }}
          to-email: amitabhsoni2004@gmail.com,trainwithshubham@gmail.com
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "CI/CD Pipeline Notification: ${{ github.workflow }} - ${{ steps.pipeline-status.outputs.result }}"
          body: "The CI/CD pipeline for the Online Shop has completed."
          html: |
            <h2>GitHub Actions - Online Shop Pipeline</h2>
            <p>Hello Team,</p>
            <p>The pipeline has completed with status: <strong>${{ steps.pipeline-status.outputs.result }}</strong></p>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse;">
              <tr style="background-color: #f2f2f2;">
                <th align="left">Workflow</th>
                <td>${{ github.workflow }}</td>
              </tr>
              <tr>
                <th align="left">Triggered by</th>
                <td>${{ github.actor }}</td>
              </tr>
              <tr>
                <th align="left">Repository</th>
                <td>${{ github.repository }}</td>
              </tr>
              <tr>
                <th align="left">Branch</th>
                <td>${{ github.ref }}</td>
              </tr>
              <tr>
                <th align="left">Run Details</th>
                <td>
                  <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">
                    View Run #${{ github.run_id }}
                  </a>
                </td>
              </tr>
            </table>
            <h3>Job Statuses:</h3>
            <ul>
              <li>Terraform Backend: ${{ needs.terraform-backend.result }}</li>
              <li>Terraform Resources: ${{ needs.terraform-resources.result }}</li>
              <li>Docker Build: ${{ needs.docker.result }}</li>
              <li>Deployment: ${{ needs.deploy.result }}</li>
            </ul>
            <p style="font-style: italic;">
              This email is sent automatically upon pipeline completion.
            </p>