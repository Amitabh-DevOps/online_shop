name: CI/CD Pipeline for Online Shop

# Trigger the workflow on pushes to the 'github-action' branch.
on:
  push:
    branches:
      - github-action

env:
  AWS_REGION: eu-west-1
  S3_BUCKET: github-actions-buckets-new
  DYNAMODB_TABLE: github-actions-dbs-new

jobs:
  ###########################################################################
  # Job 1: Configure Terraform Backend
  ###########################################################################
  terraform-backend:
    name: Configure Terraform Backend
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Step 3: Configure AWS Credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Verify AWS CLI installation.
      - name: Check AWS CLI Version
        run: aws --version

      # Step 5: Test AWS Configuration by listing S3 buckets.
      - name: Testing Configuration
        run: aws s3 ls

      # Step 6: Check if the S3 Bucket exists.
      - name: Check if S3 Bucket Exists
        id: check_bucket
        run: |
          if aws s3api head-bucket --bucket "${{ env.S3_BUCKET }}" --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            echo "Bucket exists"
            echo "CREATE_BACKEND=false" >> $GITHUB_ENV
          else
            echo "Bucket does not exist"
            echo "CREATE_BACKEND=true" >> $GITHUB_ENV
          fi

      # Step 7: Initialize the Terraform backend.
      - name: Initialize Backend
        run: terraform init
        working-directory: terraform/terraform_backend

      # Step 8: Validate Terraform configuration
      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform/terraform_backend

      # Step 9: Plan Terraform changes
      - name: Plan Backend Configuration
        run: terraform plan -var="create_backend=$CREATE_BACKEND"
        working-directory: terraform/terraform_backend

      # Step 10: Apply the Terraform backend configuration.
      - name: Apply Backend Configuration
        run: terraform apply --auto-approve -var="create_backend=$CREATE_BACKEND"
        working-directory: terraform/terraform_backend

  ###########################################################################
  # Job 2: Provision Infrastructure Resources
  ###########################################################################
  terraform-resources:
    name: Provision Resources
    runs-on: ubuntu-latest
    needs: terraform-backend
    outputs:
      ec2_public_ip: ${{ steps.get-ec2-ip.outputs.ec2_ip }}
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Configure AWS Credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Verify AWS CLI installation.
      - name: Check AWS CLI Version
        run: aws --version

      # Debug: Check available Ubuntu AMIs
      - name: Debug - Check Available Ubuntu AMIs
        run: |
          echo "🔍 Checking available Ubuntu AMIs in ${{ env.AWS_REGION }}..."
          aws ec2 describe-images \
            --region ${{ env.AWS_REGION }} \
            --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-*" \
                      "Name=state,Values=available" \
                      "Name=architecture,Values=x86_64" \
            --query 'Images[0:5].[Name,ImageId,CreationDate]' \
            --output table || echo "Failed to fetch AMI list"

      # Initialize Terraform using the remote backend.
      - name: Initialize Resources with Backend
        run: terraform init
        working-directory: terraform/terraform_resources

      # Validate Terraform configuration
      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform/terraform_resources

      # Execute Terraform plan to review changes.
      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/terraform_resources

      # Apply the Terraform changes.
      - name: Apply Terraform Changes
        run: terraform apply --auto-approve
        working-directory: terraform/terraform_resources

      # Capture the EC2 instance's public IP from Terraform outputs.
      - name: Get EC2 Public IP
        id: get-ec2-ip
        run: echo "ec2_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: terraform/terraform_resources
  ###########################################################################
  # Job 3: Build & Push Docker Image to DockerHub
  ###########################################################################
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-resources
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Docker Buildx for advanced build features.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub using stored secrets.
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the Docker image to DockerHub.
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/online-shop:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  ###########################################################################
  # Job 4: Deploy Application to EC2
  ###########################################################################
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [terraform-resources, docker]
    steps:
      # Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configure AWS Credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup SSH key for EC2 access
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/github-action-key
          chmod 600 ~/.ssh/github-action-key
          ssh-keyscan -H ${{ needs.terraform-resources.outputs.ec2_public_ip }} >> ~/.ssh/known_hosts

      # Deploy the application to the EC2 instance.
      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2 instance: ${{ needs.terraform-resources.outputs.ec2_public_ip }}"
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Update system
          sudo apt-get update
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
          fi
          
          # Stop and remove existing container
          sudo docker stop online-shop || true
          sudo docker rm online-shop || true
          
          # Pull latest image
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest
          
          # Run new container
          sudo docker run -d \
            --name online-shop \
            -p 80:3000 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest
          
          echo "Deployment completed successfully!"
          EOF
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy and execute deployment script on EC2
          scp -i ~/.ssh/github-action-key \
              -o StrictHostKeyChecking=no \
              deploy.sh ubuntu@${{ needs.terraform-resources.outputs.ec2_public_ip }}:/tmp/
          
          ssh -i ~/.ssh/github-action-key \
              -o StrictHostKeyChecking=no \
              ubuntu@${{ needs.terraform-resources.outputs.ec2_public_ip }} \
              'bash /tmp/deploy.sh'
  ###########################################################################
  # Job 5: Health Check
  ###########################################################################
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    needs: [terraform-resources, deploy]
    steps:
      - name: Wait for Application to Start
        run: sleep 30

      - name: Health Check
        run: |
          EC2_IP="${{ needs.terraform-resources.outputs.ec2_public_ip }}"
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            if curl -f -s "http://$EC2_IP" > /dev/null; then
              echo "✅ Application is healthy!"
              echo "🌐 Application URL: http://$EC2_IP"
              exit 0
            else
              echo "❌ Health check failed, retrying in 10 seconds..."
              sleep 10
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "❌ Application failed to start after $MAX_ATTEMPTS attempts"
          exit 1
  ###########################################################################
  # Job 6: Send Email Notification
  ###########################################################################
  send-notification:
    name: Send Email Notification
    runs-on: ubuntu-latest
    needs: [terraform-backend, terraform-resources, docker, deploy, health-check]
    if: always()  # Runs regardless of previous job outcomes
    steps:
      # Step 1: Determine overall pipeline status
      - name: Determine Pipeline Status
        id: pipeline-status
        run: |
          if [[ "${{ needs.terraform-backend.result }}" == "success" ]] && \
             [[ "${{ needs.terraform-resources.result }}" == "success" ]] && \
             [[ "${{ needs.docker.result }}" == "success" ]] && \
             [[ "${{ needs.deploy.result }}" == "success" ]] && \
             [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "result=Success ✅" >> $GITHUB_OUTPUT
            echo "message=All services deployed successfully and are healthy" >> $GITHUB_OUTPUT
            echo "color=#28a745" >> $GITHUB_OUTPUT
          else
            echo "result=Failed ❌" >> $GITHUB_OUTPUT
            echo "message=Some jobs failed during deployment" >> $GITHUB_OUTPUT
            echo "color=#d73a49" >> $GITHUB_OUTPUT
          fi

      # Step 2: Send Email Notification
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🚀 Online Shop Deployment - ${{ steps.pipeline-status.outputs.result }}"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background-color: #ffffff;">
              <h2 style="color: ${{ steps.pipeline-status.outputs.color }}; text-align: center;">🚀 Online Shop Deployment Notification</h2>
              
              <div style="background-color: #f8f9fa; padding: 16px; border-radius: 6px; border-left: 4px solid ${{ steps.pipeline-status.outputs.color }};">
                <h3 style="margin-top: 0; color: ${{ steps.pipeline-status.outputs.color }};">Deployment Summary</h3>
                <p><strong>Status:</strong> ${{ steps.pipeline-status.outputs.result }}</p>
                <p><strong>Message:</strong> ${{ steps.pipeline-status.outputs.message }}</p>
                <p><strong>Application URL:</strong> <a href="http://${{ needs.terraform-resources.outputs.ec2_public_ip }}" style="color: #0366d6;">http://${{ needs.terraform-resources.outputs.ec2_public_ip }}</a></p>
              </div>

              <div style="background-color: #f6f8fa; padding: 16px; border-radius: 6px; margin-top: 16px;">
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Repository</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.repository }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Branch</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.ref_name }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Triggered by</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.actor }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Commit</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${{ github.sha }}</td>
                  </tr>
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Run Details</strong></td>
                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">
                      <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="color: #0366d6; text-decoration: none;">
                        View Run #${{ github.run_id }}
                      </a>
                    </td>
                  </tr>
                </table>
              </div>

              <h3 style="margin-top: 16px;">🛠 Job Statuses</h3>
              <table style="width: 100%; border-collapse: collapse; background-color: #fff;">
                <tr style="background-color: #f6f8fa;">
                  <th style="padding: 10px; text-align: left;">Job</th>
                  <th style="padding: 10px; text-align: center;">Status</th>
                </tr>
                <tr>
                  <td style="padding: 10px;">Terraform Backend</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: ${{ needs.terraform-backend.result == 'success' && '#28a745' || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.terraform-backend.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Terraform Resources</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: ${{ needs.terraform-resources.result == 'success' && '#28a745' || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.terraform-resources.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Docker Build & Push</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: ${{ needs.docker.result == 'success' && '#28a745' || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.docker.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Application Deployment</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: ${{ needs.deploy.result == 'success' && '#28a745' || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.deploy.result }}
                  </td>
                </tr>
                <tr>
                  <td style="padding: 10px;">Health Check</td>
                  <td style="padding: 10px; text-align: center; color: white; background-color: ${{ needs.health-check.result == 'success' && '#28a745' || '#d73a49' }}; border-radius: 4px;">
                    ${{ needs.health-check.result }}
                  </td>
                </tr>
              </table>

              <div style="background-color: #e7f3ff; padding: 16px; border-radius: 6px; margin-top: 16px; border-left: 4px solid #0366d6;">
                <h4 style="margin-top: 0; color: #0366d6;">📊 Deployment Details</h4>
                <ul style="margin-bottom: 0; color: #0366d6;">
                  <li><strong>EC2 Instance:</strong> ${{ needs.terraform-resources.outputs.ec2_public_ip }}</li>
                  <li><strong>Docker Image:</strong> ${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest</li>
                  <li><strong>Application Port:</strong> 80 (HTTP)</li>
                  <li><strong>Region:</strong> ${{ env.AWS_REGION }}</li>
                </ul>
              </div>

              <p style="color: #6a737d; font-size: 0.9em; margin-top: 20px; text-align: center;">
                This email was sent automatically by <strong>GitHub Actions</strong> CI/CD Pipeline.
              </p>
            </div>
        continue-on-error: true
