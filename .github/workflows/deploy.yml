name: üöÄ Deploy Infrastructure & Application

on:
  push:
    branches: [ final ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKER_IMAGE_NAME: online-shop
  EC2_INSTANCE_TYPE: t3.micro
  TERRAFORM_VERSION: 1.6.0

jobs:
  build-and-push:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üî® Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: ‚úÖ Image Build Summary
        run: |
          echo "üéâ Docker image built and pushed successfully!"
          echo "üì¶ Image: ${{ steps.meta.outputs.tags }}"
          echo "üîç Digest: ${{ steps.build.outputs.digest }}"

  terraform-deploy:
    name: üèóÔ∏è Provision Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      instance-ip: ${{ steps.terraform-output.outputs.instance_ip }}
      instance-id: ${{ steps.terraform-output.outputs.instance_id }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

      - name: üöÄ Terraform Init
        working-directory: ./terraform
        run: |
          terraform init
          echo "‚úÖ Terraform initialized successfully"

      - name: üìã Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="instance_type=${{ env.EC2_INSTANCE_TYPE }}" \
            -var="docker_image=${{ needs.build-and-push.outputs.image-tag }}" \
            -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" \
            -out=tfplan
          echo "üìã Terraform plan created successfully"

      - name: üèóÔ∏è Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan
          echo "üéâ Infrastructure provisioned successfully"

      - name: üì§ Get Terraform Outputs
        id: terraform-output
        working-directory: ./terraform
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          INSTANCE_ID=$(terraform output -raw instance_id)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "üåê Instance IP: $INSTANCE_IP"
          echo "üÜî Instance ID: $INSTANCE_ID"

  deploy-application:
    name: üöÄ Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform-deploy]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîë Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.terraform-deploy.outputs.instance-ip }} >> ~/.ssh/known_hosts

      - name: ‚è≥ Wait for EC2 Instance
        run: |
          echo "‚è≥ Waiting for EC2 instance to be fully ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform-deploy.outputs.instance-ip }} "echo 'Instance is ready'"; then
              echo "‚úÖ Instance is ready!"
              break
            fi
            echo "‚è≥ Attempt $i/30: Instance not ready yet, waiting 30 seconds..."
            sleep 30
          done

      - name: üê≥ Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform-deploy.outputs.instance-ip }} << 'EOF'
            set -e
            
            echo "üîÑ Updating system packages..."
            sudo yum update -y
            
            echo "üê≥ Installing Docker..."
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
            
            echo "üîÑ Stopping existing container (if any)..."
            sudo docker stop online-shop || true
            sudo docker rm online-shop || true
            
            echo "üì• Pulling latest Docker image..."
            sudo docker pull ${{ needs.build-and-push.outputs.image-tag }}
            
            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name online-shop \
              --restart unless-stopped \
              -p 80:3000 \
              ${{ needs.build-and-push.outputs.image-tag }}
            
            echo "‚úÖ Application deployed successfully!"
            echo "üåê Application is running on: http://${{ needs.terraform-deploy.outputs.instance-ip }}"
          EOF

      - name: üß™ Health Check
        run: |
          echo "üß™ Performing health check..."
          for i in {1..10}; do
            if curl -f -s http://${{ needs.terraform-deploy.outputs.instance-ip }} > /dev/null; then
              echo "‚úÖ Application is healthy and responding!"
              break
            fi
            echo "‚è≥ Health check attempt $i/10: Application not ready yet, waiting 30 seconds..."
            sleep 30
          done

  deployment-summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform-deploy, deploy-application]
    if: always()
    
    steps:
      - name: üìä Print Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üèóÔ∏è Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance ID**: \`${{ needs.terraform-deploy.outputs.instance-id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Public IP**: \`${{ needs.terraform-deploy.outputs.instance-ip }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: \`${{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Application Access" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [http://${{ needs.terraform-deploy.outputs.instance-ip }}](http://${{ needs.terraform-deploy.outputs.instance-ip }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Deployment failed. Please check the logs.**" >> $GITHUB_STEP_SUMMARY
          fi
