name: Deploy Online Shop

on:
  push:
    branches: [ phase1 ]
  pull_request:
    branches: [ phase1 ]

env:
  AWS_REGION: eu-west-1

jobs:
  # Job 1: Setup Backend Infrastructure
  setup-backend:
    name: Setup Backend
    runs-on: ubuntu-latest
    outputs:
      backend_ready: ${{ steps.backend-check.outputs.ready }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Backend Status
        id: backend-check
        run: |
          # Check if S3 bucket exists
          if aws s3api head-bucket --bucket "${{ secrets.STATE_BUCKET_NAME }}" 2>/dev/null; then
            echo "Backend already exists"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "Backend needs to be created"
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Backend Infrastructure
        if: steps.backend-check.outputs.ready == 'false'
        run: |
          echo "Creating backend infrastructure..."
          cd infrastructure/backend
          terraform init
          terraform apply -auto-approve \
            -var="state_bucket_name=${{ secrets.STATE_BUCKET_NAME }}" \
            -var="dynamodb_table_name=${{ secrets.DYNAMODB_TABLE_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}"

  # Job 2: Build and Push Docker Image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: setup-backend
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/online-shop
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup-backend, build-image]
    outputs:
      instance-ip: ${{ steps.deploy.outputs.instance_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          echo "Deploying infrastructure..."
          cd infrastructure/main
          
          # Create backend config
          cat > backend.hcl << EOF
          bucket         = "${{ secrets.STATE_BUCKET_NAME }}"
          key            = "terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ secrets.DYNAMODB_TABLE_NAME }}"
          encrypt        = true
          EOF
          
          # Initialize with backend
          terraform init -backend-config=backend.hcl
          
          # Plan infrastructure
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" \
            -var="docker_image=${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest"
          
          # Apply infrastructure
          terraform apply -auto-approve \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" \
            -var="docker_image=${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest"
          
          # Get instance IP
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"

  # Job 4: Deploy Application
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-image]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy Application
        run: |
          echo "Deploying application to ${{ needs.deploy-infrastructure.outputs.instance-ip }}"
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Wait for instance to be ready
          echo "Waiting for instance to be ready..."
          sleep 60
          
          # Deploy using our script
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh \
            "${{ secrets.DOCKERHUB_USERNAME }}/online-shop:latest" \
            "${{ needs.deploy-infrastructure.outputs.instance-ip }}" \
            "~/.ssh/deploy_key"

  # Job 5: Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application]
    steps:
      - name: Application Health Check
        run: |
          echo "Performing health check..."
          INSTANCE_IP="${{ needs.deploy-infrastructure.outputs.instance-ip }}"
          
          if [ -z "$INSTANCE_IP" ]; then
            echo "❌ Instance IP is empty! Cannot perform health check."
            echo "Debug: Instance IP value: '$INSTANCE_IP'"
            exit 1
          fi
          
          echo "Checking application at: http://$INSTANCE_IP"
          
          # Wait for application to be ready
          for i in {1..20}; do
            if curl -f -s "http://$INSTANCE_IP" > /dev/null; then
              echo "✅ Application is healthy!"
              echo "🌐 Application URL: http://$INSTANCE_IP"
              exit 0
            else
              echo "Health check attempt $i/20..."
              sleep 15
            fi
          done
          
          echo "❌ Health check failed after 20 attempts"
          echo "🔍 Debug info:"
          echo "Instance IP: $INSTANCE_IP"
          echo "Trying to access: http://$INSTANCE_IP"
          exit 1

  # Job 6: Notify
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [setup-backend, build-image, deploy-infrastructure, deploy-application, health-check]
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.setup-backend.result }}" == "success" ]] && \
             [[ "${{ needs.build-image.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-application.result }}" == "success" ]] && \
             [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "result=Success ✅" >> $GITHUB_OUTPUT
            echo "message=Application deployed successfully and is healthy" >> $GITHUB_OUTPUT
          else
            echo "result=Failed ❌" >> $GITHUB_OUTPUT
            echo "message=Some deployment steps failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🚀 Online Shop Deployment - ${{ steps.status.outputs.result }}"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
              <h2 style="color: #28a745;">🚀 Online Shop Deployment Complete</h2>
              <p><strong>Status:</strong> ${{ steps.status.outputs.result }}</p>
              <p><strong>Message:</strong> ${{ steps.status.outputs.message }}</p>
              <p><strong>Application URL:</strong> <a href="http://${{ needs.deploy-infrastructure.outputs.instance-ip }}">http://${{ needs.deploy-infrastructure.outputs.instance-ip }}</a></p>
              <hr>
              <h3>Deployment Details:</h3>
              <ul>
                <li><strong>Repository:</strong> ${{ github.repository }}</li>
                <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
                <li><strong>Commit:</strong> ${{ github.sha }}</li>
                <li><strong>Triggered by:</strong> ${{ github.actor }}</li>
                <li><strong>Instance IP:</strong> ${{ needs.deploy-infrastructure.outputs.instance-ip }}</li>
              </ul>
              <hr>
              <h3>Job Results:</h3>
              <ul>
                <li>Setup Backend: ${{ needs.setup-backend.result }}</li>
                <li>Build Image: ${{ needs.build-image.result }}</li>
                <li>Deploy Infrastructure: ${{ needs.deploy-infrastructure.result }}</li>
                <li>Deploy Application: ${{ needs.deploy-application.result }}</li>
                <li>Health Check: ${{ needs.health-check.result }}</li>
              </ul>
              <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Full Details</a></p>
            </div>
        continue-on-error: true